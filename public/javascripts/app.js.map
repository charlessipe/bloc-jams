{"version":3,"sources":["app/scripts/album.js","app/scripts/app.js","app/scripts/collection.js","app/scripts/landing.js","app/scripts/profile.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzeA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvEA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAAA","file":"public/javascripts/app.js","sourcesContent":["\n\n\n// Example album\nvar albumPicasso = {\n  name: 'Introduction to Algorithms',\n  artist: 'Pablo Picasso',\n  label: 'Cubism',\n  year: '1881',\n  albumArtUrl: '/images/album-placeholder.png',\n  songs: [\n    { name: 'Blue', length: '4:26' },\n    { name: 'Green', length: '3:14' },\n    { name: 'Red', length: '5:01' },\n    { name: 'Pink', length: '3:21' },\n    { name: 'Magenta', length: '2:15'}\n  ]\n};\n\n// Another Example Album\nvar albumMarconi = {\n  name: 'The Telephone',\n  artist: 'Guglielmo Marconi',\n  label: 'EM', \n  year: '1909',\n  albumArtUrl: '/images/album-placeholder.png',\n  songs: [\n    { name: 'Hello, Operator?', length: '1:01' },\n    { name: 'Ring, ring, ring', length: '5:01' },\n    { name: 'Fits in your pocket', length: '3:21'},\n    { name: 'Can you hear me now?', length: '3:14' },\n    { name: 'Wrong phone number', length: '2:15'}\n  ]\n};\n\nvar currentlyPlayingSong = null;\n\nvar createSongRow = function(songNumber, songName, songLength) {\n  var template =\n    '<tr>'\n    +'  <td class=\"song-number col-md-1\" data-song-number=\"' + songNumber + '\">' + songNumber + '</td>'  \n    +'  <td class=\"col-md-9\">' + songName + '</td>'\n    +'  <td class=\"col-md-2\">' + songLength + '</td>'\n    '</tr>'\n    ;\n\n  // Instead of returning the row immediately, we'll attach hover functionality to it first.\n  var $row = $(template);\n\n  var onHover = function(event) {\n    var songNumberCell = $(this).find('.song-number');\n    songNumberCell.html('<a class=\"album-song-button\"><i class=\"fa fa-play\"></i></a>')\n      var songNumber = songNumberCell.data('song-number');\n      if (songNumber !== currentlyPlayingSong) {\n        songNumberCell.html('<a class=\"album-song-button\"><i class=\"fa fa-play\"></i></a>');\n      }\n  };\n  // Change from a play button to song number when the song isn't playing and we hover off the row.\n  var offHover = function(event) {\n    var songNumberCell = $(this).find('.song-number');\n    var songNumber = songNumberCell.data('song-number');\n    if (songNumber !== currentlyPlayingSong) {\n      songNumberCell.html(songNumber);\n    }\n\n  };\n\n  // Toggle the play, pause, and song number based on the button clicked.\n  var clickHandler = function(event) {\n    var songNumber = $(this).data('song-number');\n\n    if (currentlyPlayingSong !== null) {\n      // Stop playing current song\n      // Replace stopped song button with number.\n    }\n\n    if (currentlyPlayingSong !== songNumber) {\n      // Switch from Play -> Pause button to indicate new song is playing.\n      $(this).html('<a class=\"album-song-button\"><i class=\"fa fa-pause\"></i></a>');\n      currentlyPlayingSong = songNumber;\n      // A Play icon will be showing because of hover.\n      // Switch from Play -> Pause to indicate new song is playing.\n      // Set the current song to the one clicked\n    }\n    else if (currentlyPlayingSong === songNumber) {\n      // Switch from Pause -> Play button to pause currently playing song.\n      $(this).html('<a class=\"album-song-button\"><i class=\"fa fa-play\"></i></a>');\n      currentlyPlayingSong = null;\n      // Switch from Pause -> Play for current song to indicate pausing.\n      // Set the current song to null\n    }\n\n  };\n\n  $row.find('.song-number').click(clickHandler);\n  $row.hover(onHover, offHover);\n  return $row;\n \n  // Toggle the play, pause, and song number based on the button clicked.\n  var clickHandler = function(event) {\n    var songNumber = $(this).data('song-number');\n\n    if (currentlyPlayingSong !== null) {\n      // Revert to song number for currently playing song because user started playing new song\n      currentlyPlayingCell = $('.song-number[data-song-number=\"' + currentlyPlayingSong + '\"]');\n      currentlyPlayingCell.html(currentlyPlayingSong);\n      // Stop playing current song.\n      // Place stopped song button with number.\n    }\n\n    if (currentlyPlayingSong !== songNumber) {\n      // Switch from Pause -> Play button to pause currently playing song.\n      $(this).html('<a class=\"album-song-button\"><i class=\"fa fa-pause\"></i></a>');\n      currentlyPlayingSong = songNumber;\n      // A play icon will be showing because of hover.\n      // Switch from Play -> Pause to indicate new song is playing.\n      // Set the current song to the one clicked\n    }\n\n    else if (currentlyPlayingSong === songNumber) {\n      //Switch from Pause -> Play button to pause currently playing song.\n      $(this).html('<a class=\"album-song-button\"><i class=\"fa fa-play\"></i></a>');\n      currentlyPlayingSong = null;\n      // Switch from Pause -> Play for current song to indicate pausing.\n      // Set the current song to null\n\n    }\n\n  };\n\n\n  $row.find('.song-number').click(clickHandler); // attach JavaScript functionality to play button\n  $row.hover(onHover, offHover);\n  return $row;\n\n};\n\nvar changeAlbumView = function(album) {\n  // Update the album title\n  var $albumTitle = $('.album-title');\n  $albumTitle.text(album.name);\n\n  // Update the album artist\n  var $albumArtist = $('.album-artist');\n  $albumArtist.text(album.artist);\n\n  // Update the meta information\n  var $albumMeta = $('.album-meta-info');\n  $albumMeta.text(album.year + \" on \" + album.label);\n\n  // Update the album image\n  var $albumImage = $('.album-image img');\n  $albumImage.attr('src', album.albumArtUrl);\n\n  // Update the Song List\n  var $songList = $(\".album-song-listing\");\n  $songList.empty();\n  var songs = album.songs;\n  for (var i = 0; i < songs.length; i++) {\n    var songData = songs[i];\n    var $newRow = createSongRow(i + 1, songData.name, songData.length);\n    $songList.append($newRow);\n  }\n\n};\n\nvar updateSeekPercentage = function($seekBar, event) {\n  var barWidth = $seekBar.width();\n  var offsetX = event.pageX - $seekBar.offset().left;\n \n  var offsetXPercent = (offsetX  / barWidth) * 100;\n  offsetXPercent = Math.max(0, offsetXPercent);\n  offsetXPercent = Math.min(100, offsetXPercent);\n \n  var percentageString = offsetXPercent + '%';\n  $seekBar.find('.fill').width(percentageString);\n  $seekBar.find('.thumb').css({left: percentageString});\n}\n\nvar setupSeekBars = function() {\n \n  $seekBars = $('.player-bar .seek-bar');\n  $seekBars.click(function(event) {\n    updateSeekPercentage($(this), event);\n  });\n \n};\n\n//drag and drop\n/*\n$seekBars.find('.thumb').mousedown(function(event){\n  var $seekBar = $(this).parent();\n    $seekBar.addClass('no-animate');\n  $(document).bind('mousemove.thumb', function(event){\n    updateSeekPercentage($seekBar, event);\n  });\n \n  //cleanup\n  $(document).bind('mouseup.thumb', function(){\n      $seekBar.removeClass('no-animate');\n\n    $(document).unbind('mousemove.thumb');\n    $(document).unbind('mouseup.thumb');\n  });\n \n});\n*/\n\n\n\n// This 'if' condition is used to prevent the jQuery modifications\n// from happening on non-Album view pages.\n// - Use a regex to validate that the url has \"/album\" in its path.\nif (document.URL.match(/\\/album.html/)) {\n  // Wait until the HTML is fully processed. \n  $(document).ready(function() {\n    changeAlbumView(albumPicasso);\n    setupSeekBars();\n\n    $('img').click(function() {\n    changeAlbumView(albumMarconi);\n    });\n  });\n}\n\n\n\n\n\n\n\n\n\n","\n //require('./landing');\n //require('./album');\n //require('./collection');\n //require('./profile');\n \n// Example album\nvar albumPicasso = {\n  name: 'The Colors',\n  artist: 'Pablo Picasso',\n  label: 'Cubism',\n  year: '1881',\n  albumArtUrl: '/images/album-placeholder.png',\n \n  songs: [\n      { name: 'Blue', length: 163.38, audioUrl: '/music/placeholders/blue' },\n      { name: 'Green', length: 105.66, audioUrl: '/music/placeholders/green' },\n      { name: 'Red', length: 270.14, audioUrl: '/music/placeholders/red' },\n      { name: 'Pink', length: 154.81, audioUrl: '/music/placeholders/pink' },\n      { name: 'Magenta', length: 375.92, audioUrl: '/music/placeholders/magenta' }\n    ]\n};\n\n\nblocJams = angular.module('BlocJams', ['ui.router']);\n\nblocJams.controller('Collection.controller', ['$scope', 'SongPlayer', function($scope, SongPlayer) {\n  $scope.albums = [];\n    for (var i = 0; i < 33; i++) {\n      $scope.albums.push(angular.copy(albumPicasso)); \n    }\n\n      $scope.playAlbum = function(album) {  // Start playing first song in album by clicking on overlays on the Collection page\n        SongPlayer.setSong(album, album.songs[0]); // Targets first song in the array.\n      }\n\n  //ConsoleLogger.log();\n\n}]);\n\n\nblocJams.config(['$stateProvider', '$locationProvider', function($stateProvider, $locationProvider) {\n  $locationProvider.html5Mode(true);\n\n  $stateProvider.state('landing', {\n    url: '/',\n    controller: 'Landing.controller',\n    templateUrl: '/templates/landing.html'\n  });\n\n  /*$stateProvider.state('song', {\n    url: '/song',\n    controller: 'Landing.controller',\n    templateUrl: '/templates/song.html'\n  }); */\n\n  $stateProvider.state('collection', {\n    url: '/collection',\n    controller: 'Collection.controller',\n    templateUrl: '/templates/collection.html'\n  });\n\n \n  $stateProvider.state('album', {\n    url: '/album',\n    templateUrl: '/templates/album.html',\n    controller: 'Album.controller'\n  });\n\n}]);\n\nblocJams.controller('Landing.controller', ['$scope', function($scope) {\n  $scope.subText = \"Turn the music up!\";\n\n    $scope.subTextClicked = function() {\n      $scope.subText += '!';\n  };\n\n\n\n\n$scope.albumURLs = [\n  '/images/album-placeholders/album-1.jpg',\n  '/images/album-placeholders/album-2.jpg',\n  '/images/album-placeholders/album-3.jpg',\n  '/images/album-placeholders/album-4.jpg',\n  '/images/album-placeholders/album-5.jpg',\n  '/images/album-placeholders/album-6.jpg',\n  '/images/album-placeholders/album-7.jpg',\n  '/images/album-placeholders/album-8.jpg',\n  '/images/album-placeholders/album-9.jpg',\n  ];\n\n }]);\n\nblocJams.controller('Album.controller', ['$scope', 'SongPlayer', 'ConsoleLogger', function($scope, SongPlayer, ConsoleLogger) {\n  $scope.album = angular.copy(albumPicasso);\n\n    var hoveredSong = null;\n \n    $scope.onHoverSong = function(song) {\n      hoveredSong = song;\n    };\n \n    $scope.offHoverSong = function(song) {\n     hoveredSong = null;\n    };\n\n      $scope.getSongState = function(song) {\n        if (song === SongPlayer.currentSong && SongPlayer.playing) {\n          return 'playing';\n      }\n      else if (song === hoveredSong) {\n        return 'hovered';\n      }\n      return 'default';\n    };\n\n      $scope.playSong = function(song) {\n        SongPlayer.setSong($scope.album, song);\n      };\n \n      $scope.pauseSong = function(song) {\n        SongPlayer.pause();\n      };\n\n      //ConsoleLogger.log();\n}]);\n\n// Use UI Router for playbar\n/*\nblocJams.config(function($stateProvider) {\n  $stateProvider\n    .state('playbar', {\n      url: \"/player_bar.html\",\n      views: {\n        \"playbar\": { template: \"/templates/player_bar.html\" }\n      }\n    })\n});\n\n*/\n\nblocJams.controller('PlayerBar.controller', ['$scope', 'SongPlayer', 'ConsoleLogger', function($scope, SongPlayer, ConsoleLogger) {\n  $scope.songPlayer = SongPlayer;\n\n    SongPlayer.onTimeUpdate(function(event, time) {\n      $scope.$apply(function(){\n        $scope.playTime = time;\n      });\n    });\n\n  //ConsoleLogger.log();\n\n}]);\n\n \nblocJams.service('SongPlayer', ['$rootScope', function($rootScope) {\n  var currentSoundFile = null;\n  var trackIndex = function(album, song) {\n    return album.songs.indexOf(song);\n  };\n\n  return {\n    currentSong: null,\n    currentAlbum: null,\n    playing: false,\n \n    play: function() {\n      this.playing = true;\n        currentSoundFile.play();\n    },\n    pause: function() {\n      this.playing = false;\n        currentSoundFile.pause();\n    },\n    next: function() {\n      var currentTrackIndex = trackIndex(this.currentAlbum, this.currentSong);\n      currentTrackIndex++;\n      if (currentTrackIndex >= this.currentAlbum.songs.length) {\n        currentTrackIndex = 0;\n      }\n        var song = this.currentAlbum.songs[currentTrackIndex];\n        this.setSong(this.currentAlbum, song);\n      //this.currentSong = this.currentAlbum.songs[currentTrackIndex];\n    },\n    previous: function() { // this function is called in player_bar.html\n      var currentTrackIndex = trackIndex(this.currentAlbum, this.currentSong);\n      currentTrackIndex--;\n      if (currentTrackIndex < 0) {\n        currentTrackIndex = this.currentAlbum.songs.length - 1;\n      }\n        var song = this.currentAlbum.songs[currentTrackIndex];\n        this.setSong(this.currentAlbum, song);\n      //this.currentSong = this.currentAlbum.songs[currentTrackIndex];\n    },\n\n    seek: function(time) {\n      // Checks to make sure that a sound file is playing before seeking.\n      if(currentSoundFile) {\n        // Uses a Buzz method to set the time of the song.\n        currentSoundFile.setTime(time);\n      }\n    },\n\n      onTimeUpdate: function(callback) {\n        return $rootScope.$on('sound:timeupdate', callback); // Adding this method will allow us to execute a callback on every time update.\n      },\n\n    setSong: function(album, song) {\n        if (currentSoundFile) {\n          currentSoundFile.stop();  \n        }\n      this.currentAlbum = album;\n      this.currentSong = song;\n\n        currentSoundFile = new buzz.sound(song.audioUrl, {\n          formats: [ \"mp3\" ],\n          preload: true\n        });\n\n        currentSoundFile.bind('timeupdate', function(e){\n          $rootScope.$broadcast('sound:timeupdate', this.getTime());\n        });\n\n        this.play();\n    }\n  };\n}]);\n\nblocJams.service('ConsoleLogger', function() {\n  console.log(\"Hello Earth\");\n});\n\n\n\n\nblocJams.directive('slider', ['$document', function($document){\n\n/*\n  var updateSeekPercentage = function($seekBar, event) {\n    var barWidth = $seekBar.width();\n    var offsetX =  event.pageX - $seekBar.offset().left;\n \n    var offsetXPercent = (offsetX  / $seekBar.width()) * 100;\n    offsetXPercent = Math.max(0, offsetXPercent);\n    offsetXPercent = Math.min(100, offsetXPercent);\n \n    var percentageString = offsetXPercent + '%';\n    $seekBar.find('.fill').width(percentageString);\n    $seekBar.find('.thumb').css({left: percentageString});\n  }\n*/\n\n  var numberFromValue = function(value, defaultValue) {\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    if(typeof value === 'undefined') {\n      return defaultValue;\n    }\n\n    if(typeof value === 'string') {\n      return Number(value);\n    }\n\n  }\n \n  return {\n    templateUrl: '/templates/directives/slider.html',\n    replace: true,\n    restrict: 'E',\n      //scope: {}, // Creates a scope\n      scope: {  // makes directive treat the onChange attribute as code to be evaluated\n        onChange: '&'\n      },\n    link: function(scope, element, attributes) {\n      // These values represent the progress into the song/volume bar, and its max value.\n      // For now, we're supplying arbitrary initial and max values.\n      scope.value = 0;\n      scope.max = 100; // default max\n    var $seekBar = $(element); // sets the seekbar variable to $(element)\n      console.log(attributes);\n      attributes.$observe('value', function(newValue) {\n        scope.value = numberFromValue(newValue, 0); // varible that holds position of thumb as a percent\n      });\n\n      attributes.$observe('max', function(newValue) {\n        scope.max = numberFromValue(newValue, 100) || 100;\n      });\n\n      var percentString = function () {   // Calculate the position\n        //var percent = Number(scope.value) / Number(scope.max) * 100;\n        var value = scope.value || 0;\n        var max = scope.max || 100;\n        percent = value / max * 100;\n        return percent + \"%\"; \n      }\n\n      scope.fillStyle = function() {\n        return {width: percentString()};\n      }\n\n      scope.thumbStyle = function() {\n        return {left: percentString()};\n      }\n\n      scope.onClickSlider = function(event) {  // Function to change the slider location\n        var percent = calculateSliderPercentFromMouseEvent($seekBar, event);\n        scope.value = percent * scope.max;\n          notifyCallback(scope.value); // callback to notify us of changes to the slider position\n      }\n\n      var calculateSliderPercentFromMouseEvent = function($slider, event) {  // Function to determine slider location where the event occured\n        var offsetX = event.pageX - $slider.offset().left; // Distace from left\n        var sliderWidth = $slider.width(); // Width of slider\n        var offsetXPercent = (offsetX / sliderWidth); \n        offsetXPercent = Math.max(0, offsetXPercent);\n        offsetXPercent = Math.min(1, offsetXPercent);\n        return offsetXPercent;\n      }\n\n      scope.trackThumb = function() { // Function for dragging slider\n        $document.bind('mousemove.thumb', function(event){\n          var percent = calculateSliderPercentFromMouseEvent($seekBar, event);\n          scope.$apply(function(){  // $apply looks for changes affected by the function called on the jQuery mousemove event\n            scope.value = percent * scope.max;\n              notifyCallback(scope.value); // callback to notify us of changes to the slider position\n          });  \n        });\n\n        //cleanup\n        $document.bind('mouseup.thumb', function(){  // $document is an Angular wrapper for the browser's window.document object\n          $document.unbind('mousemove.thumb');\n          $document.unbind('mouseup.thumb');\n        });\n\n      };\n\n      var notifyCallback = function(newValue) {\n        if(typeof scope.onChange === 'function') {\n          scope.onChange({value: newValue});\n        }\n      }\n\n\n /*\n      $seekBar.click(function(event) {\n        updateSeekPercentage($seekBar, event);\n      });\n \n      $seekBar.find('.thumb').mousedown(function(event){\n        $seekBar.addClass('no-animate');\n \n        $(document).bind('mousemove.thumb', function(event){\n          updateSeekPercentage($seekBar, event);\n        });\n \n        //cleanup\n        $(document).bind('mouseup.thumb', function(){\n          $seekBar.removeClass('no-animate');\n          $(document).unbind('mousemove.thumb');\n          $(document).unbind('mouseup.thumb');\n        });\n \n      }); */\n    }\n  };\n}]);\n\n\nblocJams.filter('timecode', function(){\n  return function(seconds) {\n    seconds = Number.parseFloat(seconds);\n \n    // Returned when no time is provided.\n    if (Number.isNaN(seconds)) {\n      return '-:--';\n    }\n \n    // make it a whole number\n    var wholeSeconds = Math.floor(seconds);\n \n    var minutes = Math.floor(wholeSeconds / 60);\n \n    remainingSeconds = wholeSeconds % 60;\n \n    var output = minutes + ':';\n \n    // zero pad seconds, so 9 seconds should be :09\n    if (remainingSeconds < 10) {\n      output += '0';\n    }\n \n    output += remainingSeconds;\n \n    return output;\n  }\n})\n\n\n\n// Create directive clickMe, restricted to an element, creates an alert when clicked\n\n/*\nblocJams.directive('clickMe', function() {\n  return {\n    restrict: \"E\", \n    link: function(scope, element) {\n      $(element).click(function(){\n        alert(\"This has been clicked\");\n      )};\n    }\n  };\n});\n*/\n\n// Create directive countHoverTime, restricted to an attribute, console.log number of seconds hovered\n\n/*\nblocJams.directive('countHoverTime', function() {\n\n  return {\n    restrict: \"A\", \n    link: function() {\n      var seconds = 0;    \n      \n      $(document).ready(function(){\n        function countTime(){\n          $(element).hover().setTimeout(addSecond, 1000);   \n        }\n\n        function addSecond(){\n          seconds ++;\n        }\n        \n        console.log(\"The element has been hovered for \" + seconds + \" seconds!\");\n    }); \n});\n\n*/\n\n\n\n\n\n\n\n/*\n\n\neconds = window.setTimeout( seconds +=1 , 1000);\n        console.log(\"The element has been hovered for \" + seconds + \" seconds\");\n      };\n    };\n});\n\nblocJams.directive('countHoverTime', function() {\n\n  return {\n    restrict: \"A\", \n    link: function() {\n      var begin = 0;\n      var end = 0;\n\n    $(element).hover(function () {\n      begin = new Date().getTime();\n    });\n\n    $(element).leave(function () {\n      end = new Date().getTime();\n      sec = (end - begin) / 1000;\n      console.log(\"The element has been hovered for \" + sec + \" seconds\");\n    });\n  };\n});\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n","var buildAlbumThumbnail = function() {\n    var template =\n        '<div class=\"collection-album-container col-md-2\">'\n      + '  <div class=\"collection-album-image-container\">'\n      + '     <img src=\"/images/album-placeholder.png\"/>'\n      + '  </div>'\n      + '  <div class=\"caption album-collection-info\">'\n      + '    <p>'\n      + '      <a class=\"album-name\" href=\"/album.html\"> Album Name </a>'\n      + '      <br/>'\n      + '      <a href=\"/album.html\"> Artist name </a>'\n      + '      <br/>'\n      + '      X songs'\n      + '      <br/>'\n      + '      X:XX Total Length'\n      + '      <br/>'\n      + '    </p>'\n      + '  </div>'\n      + '</div>';\n \n   return $(template);\n };\n\n// below the buildAlbumThumbnail function\n\nvar buildAlbumOverlay = function(albumURL) {\n  var template = \n    '<div class=\"collection-album-image-overlay\">'\n  + '   <div class=\"collection-overlay-content\">'\n  + '     <a class=\"collection-overlay-button\" href=\"' + albumURL + '\">'\n  + '       <i class=\"fa fa-play\"></i>'\n  + '     </a>'\n  + '     &nbsp;'\n  + '     <a class=\"collection-overlay-button\">'\n  + '       <i class=\"fa fa-plus\"></i>'\n  + '     </a>'\n  + '   </div>'\n  + ' </div>'\n  ;\n  return $(template);\n};\n\nvar updateCollectionView = function() {\n  var $collection = $(\".collection-container .row\");\n  $collection.empty();\n  var random = Math.floor((Math.random() * 75) + 26);\n\n  for (var i = 0; i < random; i++) {\n    var $newThumbnail = buildAlbumThumbnail();\n    $collection.append($newThumbnail);\n  }\n  var onHover = function(event) {\n    $(this).append(buildAlbumOverlay(\"/album.html\"));\n  };\n\n  var offHover = function(event) {\n    $(this).find('.collection-album-image-overlay').remove();\n  };\n\n    $collection.find('.collection-album-image-container').hover(onHover, offHover);\n}; \n\n\nif (document.URL.match(/\\/collection.html/)) {\n  // Wait until the HTML is fully processed.\n  $(document).ready(function() {\n    updateCollectionView();\n   });\n}\n\n\n","console.log(\"hello!\");\n\n$(document).ready(function() {\n  console.log(\"hello!\");\n});\n\n$(document).ready(function() {\n  \n  $('.hero-content h3').click(function(){\n    var subText = $(this).text();\n    $(this).text(subText + \"!\");\n  });\n  \n  /*\n  $('.hero-content h3').hover(function(){\n    $(this).css({'color', 'red'});\n  });\n  */\n\n  var onHoverAction = function(event) {\n    console.log('Hover action triggered.');\n    $(this).animate({'margin-top': '10px'});\n  };\n\n  var offHoverAction = function(event) {\n    console.log('Off-hover action triggered.');\n    $(this).animate({'margin-top': '0px'});\n  };\n\n  $('.selling-points .point').hover(onHoverAction, offHoverAction);\n\n  $('.selling-points .point').click(function() {\n    $(this).animate({'font-size': '16px'});  \n  });\n\n  $('.navbar-header').click(function() {\n    $('.navbar-header').fadeOut( \"slow\" ); \n  });\n\n\n});\n","//holds the name of our tab button container for selection later in the function\nvar tabsContainer = \".user-profile-tabs-container\"\nvar selectTabHandler = function(event) {\n  $tab = $(this);\n  $(tabsContainer + \" li\").removeClass('active');\n  $tab.parent().addClass('active');\n  selectedTabName = $tab.attr('href');\n  console.log(selectedTabName);\n  $(\".tab-pane\").addClass('hidden');\n  $(selectedTabName).removeClass('hidden');\n  event.preventDefault();\n};\n\nif (document.URL.match(/\\/profile.html/)) {\n  $(document).ready(function() {\n    var $tabs = $(tabsContainer + \" a\");\n    $tabs.click(selectTabHandler);\n    $tabs[0].click();\n  });\n\n}"]}